
#include <WiFiManager.h>
#include <ArduinoJson.h>
#include <MD5Builder.h>
#include <PubSubClient.h>
#include <ESP8266WiFi.h>  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ESP8266
#include <ESP8266httpUpdate.h>
#include <Preferences.h>

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#define LED_PIN 1
#define RELAY_PIN 12
#define BUTTON_PIN 3
//#define BUZZER_PIN 5  // TX Pin ‡∏Ç‡∏≠‡∏á ESP8266

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
#define LED_ON LOW
#define LED_OFF HIGH
#define RELAY_ON HIGH
#define RELAY_OFF LOW
#define BUTTON_ON LOW
#define BUTTON_OFF HIGH
#define BUZZER_ON LOW
#define BUZZER_OFF HIGH

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT
const char* mqtt_server = "mqtt.ssk3.go.th";  // ‡πÉ‡∏™‡πà IP ‡∏Ç‡∏≠‡∏á Windows Server
const int mqtt_port = 1883;                   // MQTT Port
const char* mqtt_user = "ssk3";               // Username MQTT
const char* mqtt_pass = "33030000";           // Password MQTT
char* mqtt_topic;                             // Topic ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Subscribe & Publish

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
String AP_SSID;                 // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
const int MODEL_ID = 1;         // 1 = sonoffbasic 2 = esp32 3 = esp32(12ch) ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
const int CURRENT_VERSION = 1;  // ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
const int firmwareID = 1;
const char* AUTH_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZpY2VUeXBlIjoiNHNkZXZpY2UiLCJ1c2VybmFtZSI6ImRldnNzazMiLCJleHAiOjE3MzkzNTEzOTEsImlzcyI6ImFpLnNzazMuZ28udGgiLCJhdWQiOiJhaS5zc2szLmdvLnRoIn0.yF74XH5Mo9FWg9i2LUFTn-ztRHYxI1YbfqfORUpnGu0";
const char* API_BASE_URL = "https://api.4splus.ssk3.go.th/api/v1/splus";
const char* API_MQTT_URL = "https://api.4splus.ssk3.go.th/api/v1/mqtt";
const char* SCHOOL_BASE_URL = "https://api.4splus.ssk3.go.th/api/v1/splus/getSchoolId";

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Last Will and Testament (LWT)
char* willTopic;
String willMessageStr = String("{\"statusState\":\"OFFLINE\",\"version\":\"") + CURRENT_VERSION + "\"}";
const char* willMessage = willMessageStr.c_str();
const int willQoS = 0;
const bool willRetain = true;

// ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
unsigned long startMillis;
unsigned long timer_duration = 1000;
unsigned long elapsedMillis;
int loopcount = 0;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
bool IsPressing = false;
bool ButtonState = false;
int AlarmStep[6] = { 1, 0, 1, 0, 1, 0 };
int AlarmStepState = 0;
int LedStep[2] = { 0, 1 };
int LedStepState = 1;


// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
String deviceMAC = "";
String deviceId = "";
String schoolId = "";
//int schoolId = 0;
// ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
WiFiManager wifiManager;
Preferences preferences;
//WiFiClientSecure ClientSSL;
WiFiClient espClient;            // ‡πÉ‡∏ä‡πâ WiFiClient ‡πÅ‡∏ó‡∏ô WiFiClientSecure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï 1883
PubSubClient client(espClient);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PubSubClient ‡πÉ‡∏ä‡πâ espClient
std::unique_ptr<BearSSL::WiFiClientSecure> clientSSL(new BearSSL::WiFiClientSecure);


// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
void checkButtonPress();
void countPress();
void ReadRelayState();
void ReadLedState();
void LedOn();
void LedOff();
void generateDeviceId();
void upgradeFirmware(String url);
void postStateUpdateToApi(bool btnState);
void getSchoolID();
void LoadSchoolID();
void clearSchoolId();
void ResetWifi();
void reconnectMQTT();
void callback(char* topic, byte* payload, unsigned int length);
String getMacAddress();

/**
 * ‡∏î‡∏∂‡∏á MAC Address ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
 */
String getMacAddress() {
  uint8_t baseMac[6];
  WiFi.macAddress(baseMac);

  char baseMacChr[18] = { 0 };
  sprintf(baseMacChr, "%02X%02X%02X%02X%02X%02X", baseMac[0], baseMac[1], baseMac[2], baseMac[3], baseMac[4], baseMac[5]);
  return String(baseMacChr);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á device ID ‡∏à‡∏≤‡∏Å MD5 hash ‡∏Ç‡∏≠‡∏á MAC address
 */
void generateDeviceId() {
  if (deviceMAC.length() > 0) {
    MD5Builder md5;
    md5.begin();
    md5.add(deviceMAC);
    md5.calculate();
    deviceId = md5.toString();
  }
}

/**
 * ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LED ‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
 */
void ReadLedState() {
  digitalWrite(LED_PIN, LED_ON);
}

/**
 * ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
 */
void ReadRelayState() {
  if (ButtonState) {
    if (AlarmStepState == 6) {
      AlarmStepState = 0;
    }
    digitalWrite(RELAY_PIN, AlarmStep[AlarmStepState] == 1 ? RELAY_ON : RELAY_OFF);
    AlarmStepState++;
  } else {
    digitalWrite(RELAY_PIN, RELAY_OFF);
    AlarmStepState = 0;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
void checkButtonPress() {
  if (digitalRead(BUTTON_PIN) == BUTTON_ON) {
    IsPressing = true;
  } else {
    IsPressing = false;
  }
}

/**
 * ‡πÄ‡∏õ‡∏¥‡∏î LED
 */
void LedOn() {
  digitalWrite(LED_PIN, LED_ON);
}

/**
 * ‡∏õ‡∏¥‡∏î LED
 */
void LedOff() {
  digitalWrite(LED_PIN, LED_OFF);
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ school ID ‡∏à‡∏≤‡∏Å preferences
 */
void clearSchoolId() {
  preferences.begin("config", false);  // ‡πÄ‡∏õ‡∏¥‡∏î Preferences ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Read/Write
  preferences.remove("schoolId");      // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ schoolId
  preferences.end();                   // ‡∏õ‡∏¥‡∏î Preferences
  //Serial.println("schoolId ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
}

/**
 * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
 */
void ResetWifi() {

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ WiFi ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (SSID, Password)
  wifiManager.resetSettings();

  delay(100);
  

  // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ Config ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô schoolId) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  clearSchoolId();
  
  Serial.println("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi ‡πÅ‡∏•‡πâ‡∏ß!");

  delay(100);
  yield();
  WiFi.disconnect(true);
  Serial.println("‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi ‡πÅ‡∏•‡πâ‡∏ß");
  
  ESP.eraseConfig();
  Serial.println("‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß");
  delay(1000);
  yield();
  // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
  ESP.restart();
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏î
 */
void countPress() {
  if (IsPressing) {
    IsPressing = false;
    long startTime = millis();
    long maxPress = 5000;
    long minPress = 100;
    long chkTime = 0;

    while (digitalRead(BUTTON_PIN) == BUTTON_ON) {
      chkTime = millis() - startTime;
      if (chkTime >= maxPress) {
        for (int i = 0; i < 5; i++) {
          digitalWrite(LED_PIN, LED_ON);
          delay(200);
          digitalWrite(LED_PIN, LED_OFF);
          delay(200);
        }
        delay(1000);
      }
      delay(100);
    }

    if (chkTime >= maxPress) {
      //btnPress = longPress;
      
      ButtonState = false;
      chkTime = 0;
      //Serial.println("in Long press");
      ResetWifi();
    } else if (chkTime <= maxPress && chkTime >= minPress) {
      //btnPress = shortPress;
      ButtonState = !ButtonState;
      chkTime = 0;
      digitalWrite(RELAY_PIN, ButtonState ? RELAY_ON : RELAY_OFF);
      postStateUpdateToApi(ButtonState);
    } else {
      //btnPress = unPress;
    }
  }

  IsPressing = false;
}

/**
 * ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
 */
void postStateUpdateToApi(bool btnState) {
  if (WiFi.status() != WL_CONNECTED) {
    //Serial.println("WiFi ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠!");
    return;
  }

  HTTPClient http;
  // std::unique_ptr<BearSSL::WiFiClientSecure> client2(new BearSSL::WiFiClientSecure);
  // client2->setInsecure();
  http.begin(*clientSSL, API_MQTT_URL);
  http.setTimeout(5000);
  http.addHeader("Content-Type", "application/json");
  http.addHeader("Authorization", "Bearer " + String(AUTH_TOKEN));

  StaticJsonDocument<64> doc;
  doc["deviceId"] = deviceId;
  doc["relayState"] = btnState;
  doc["userName"] = "esp8266";
  doc["mac"] = deviceMAC;
  //doc["firmwareID"] = firmwareID;

  String requestBody;
  serializeJson(doc, requestBody);
  ////Serial.println(requestBody);

  int httpResponseCode = http.POST(requestBody);
  if (httpResponseCode > 0) {
    //Serial.print("‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ");
    //Serial.println(httpResponseCode);
    //Serial.println("‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: " + http.getString());
  } else {
    //Serial.print("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ");
    //Serial.println(http.errorToString(httpResponseCode));
  }

  http.end();
}

/**
 * ‡∏î‡∏∂‡∏á school ID ‡∏à‡∏≤‡∏Å API
 */
void getSchoolID() {
  if (WiFi.status() != WL_CONNECTED) {
    //Serial.println("WiFi ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠!");
    return;
  }

  HTTPClient http;
  // std::unique_ptr<BearSSL::WiFiClientSecure> client2(new BearSSL::WiFiClientSecure);
  // client2->setInsecure();  // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL certificate
  http.begin(*clientSSL, SCHOOL_BASE_URL);
  http.setTimeout(5000);  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ Timeout

  http.addHeader("Content-Type", "application/json");
  http.addHeader("Authorization", "Bearer " + String(AUTH_TOKEN));

  StaticJsonDocument<128> doc;
  doc["deviceId"] = deviceId;      // MD5 ‡∏Ç‡∏≠‡∏á MAC Address
  doc["modelID"] = MODEL_ID;       // Model ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4s
  doc["mac"] = deviceMAC;          // mac address
  doc["firmwareID"] = firmwareID;  // Model ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4s

  String requestBody;
  serializeJson(doc, requestBody);
  Serial.println("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: " + requestBody);

  int httpResponseCode = http.POST(requestBody);

  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("üì© ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: " + response);

    StaticJsonDocument<64> responseDoc;
    DeserializationError error = deserializeJson(responseDoc, response);

    if (!error) {
      //Serial.print("‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ");
      //Serial.println(httpResponseCode);
      schoolId = String(responseDoc["schoolId"]);
      Serial.println(schoolId);
    } else {
      //Serial.println("‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå JSON ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!");
    }
  } else {
    //Serial.print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP: ");
    Serial.println(http.errorToString(httpResponseCode));
  }

  http.end();
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á school ID
 */
void LoadSchoolID() {
  preferences.begin("config", false);
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ schoolId ‡∏à‡∏≤‡∏Å Preferences
  schoolId = preferences.getString("schoolId", "");

  if (schoolId == "") {
    //Serial.println("‡πÑ‡∏°‡πà‡∏û‡∏ö schoolId ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API...");
    getSchoolID();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á schoolId

    if (schoolId != "") {
      preferences.putString("schoolId", schoolId);  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Preferences
      //Serial.println("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å schoolId: " + schoolId);
      preferences.end();

      //Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ESP...");
      delay(2000);
      ESP.restart();  // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
    } else {
      //Serial.println("‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á schoolId ‡∏à‡∏≤‡∏Å API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!");
       delay(2000);
      ESP.restart();  // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
    }
  } else {
    //Serial.println("‡πÇ‡∏´‡∏•‡∏î schoolId ‡∏à‡∏≤‡∏Å Preferences: " + schoolId);
  }

  preferences.end();
}

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå‡∏à‡∏≤‡∏Å URL
 */
void upgradeFirmware(String url) {
  Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï OTA...");
  Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: " + url);

  //‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö LED ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå
  for (int i = 0; i < 5; i++) {
    digitalWrite(LED_PIN, LED_ON);
    delay(200);
    digitalWrite(LED_PIN, LED_OFF);
    delay(200);
  }

  delay(1000);

  //‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô HTTP
 
  t_httpUpdate_return ret = ESPhttpUpdate.update(*clientSSL, url);

  switch (ret) {
    case HTTP_UPDATE_FAILED:
      Serial.printf("HTTP_UPDATE_FAILED ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (%d): %s\n",
                    ESPhttpUpdate.getLastError(),
                    ESPhttpUpdate.getLastErrorString().c_str());
      break;

    case HTTP_UPDATE_NO_UPDATES:
      Serial.println("HTTP_UPDATE_NO_UPDATES");
      break;

    case HTTP_UPDATE_OK:
      Serial.println("HTTP_UPDATE_OK");
      Serial.println("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó...");
      ESP.restart();  // ‡∏£‡∏µ‡∏ö‡∏π‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      break;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° MQTT
 */
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ");
  Serial.println(topic);

  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  //Serial.print("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ");
  //Serial.println(message);

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON Object
  StaticJsonDocument<64> doc;
  DeserializationError error = deserializeJson(doc, message);

  if (error) {
    //Serial.print("‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå JSON ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ");
    //Serial.println(error.c_str());
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô topic ‡∏Ç‡∏≠‡∏á relay ‡∏´‡∏£‡∏∑‡∏≠ ota
  String topicStr = String(topic);

  if (topicStr.endsWith("/relay")) {
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå
    const char* relay = doc["relayState"];

    if (relay) {
      if (strcmp(relay, "ON") == 0) {
        digitalWrite(RELAY_PIN, RELAY_ON);
        ButtonState = true;
        //Serial.println("‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå : ‡πÄ‡∏õ‡∏¥‡∏î");
      } else if (strcmp(relay, "OFF") == 0) {
        ButtonState = false;
        //Serial.println("‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå : ‡∏õ‡∏¥‡∏î");
        digitalWrite(RELAY_PIN, RELAY_OFF);
      }
      //Serial.println("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå : " + String(ButtonState));
    }
  } else if (topicStr.endsWith("/ota")) {
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï OTA
    String firmwareUrl = doc["url"];

    if (firmwareUrl) {
      //Serial.println("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï OTA");
      //Serial.print("URL ‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå: ");
      //Serial.println(firmwareUrl);
      upgradeFirmware(firmwareUrl);
    }
  } else if (topicStr.endsWith("/reset")) {
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
    String Pass = doc["pass"];
    //Serial.println(Pass);

    if (Pass) {
      if (Pass == "33030000") {
        //Serial.println("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô");
        //Serial.println("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ wifi ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        ResetWifi();
      }
    }
  } else if (topicStr.endsWith("/config")) {
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    String Pass = doc["pass"];
    //Serial.println(Pass);

    if (Pass == "33030000") {
      //Serial.println("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô");
      //Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ schoolID ‡πÉ‡∏´‡∏°‡πà");
      clearSchoolId();
      LoadSchoolID();
    }
  }
}

/**
 * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå MQTT
 */
void reconnectMQTT() {
  while (!client.connected()) {
    //Serial.print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MQTT...");
    checkButtonPress();
    countPress();

    if (client.connect(deviceId.c_str(), mqtt_user, mqtt_pass,
                       ("schoolId/" + schoolId + "/deviceId/" + deviceId + "/status").c_str(),
                       willQoS, willRetain, willMessage)) {
      Serial.println("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

      // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
      String willMessageStrOnline = String("{\"statusState\":\"ONLINE\",\"version\":\"") + CURRENT_VERSION + "\"}";
      const char* willMessageOnline = willMessageStrOnline.c_str();
      client.publish(("schoolId/" + schoolId + "/deviceId/" + deviceId + "/status").c_str(),
                     willMessageOnline, willRetain);

      // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
      client.subscribe(("schoolId/" + schoolId + "/deviceId/+/relay").c_str());
      client.subscribe(("schoolId/" + schoolId + "/deviceId/" + deviceId +  "/ota").c_str());
      client.subscribe(("schoolId/" + schoolId + "/deviceId/" + deviceId +  "/reset").c_str());
      client.subscribe(("schoolId/" + schoolId + "/deviceId/" + deviceId +  "/config").c_str());
    } else {
      //Serial.print("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, rc=");
      //Serial.print(client.state());
      //Serial.println(" ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
      delay(5000);
    }
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup
 */
void setup() {
  Serial.begin(115200);
  
  delay(5000);

  Serial.println("4sPLUS ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô  " + String(CURRENT_VERSION));

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi
  WiFi.mode(WIFI_STA);
  clientSSL->setInsecure();
  //ClientSSL.setInsecure();

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  //pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(LED_PIN, LED_OFF);
  //digitalWrite(BUZZER_PIN, BUZZER_OFF);
  digitalWrite(RELAY_PIN, RELAY_OFF);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  startMillis = millis();

  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  deviceMAC = getMacAddress();
  
  AP_SSID = "4s+" + deviceMAC;
  generateDeviceId();
  Serial.println(deviceMAC + " : " + deviceId);
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi Manager
  wifiManager.setConfigPortalTimeout(90);  // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  if (!wifiManager.autoConnect(AP_SSID.c_str(), "12345678")) {
    //Serial.println("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    ESP.restart();
  }

  // ‡πÇ‡∏´‡∏•‡∏î school ID
  LoadSchoolID();

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  // ‡πÄ‡∏õ‡∏¥‡∏î LED ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
  LedOn();
}

/**
 * ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
 */
void loop() {
  checkButtonPress();

  if (IsPressing) {
    countPress();
  } else {
    if (!client.connected()) {
      reconnectMQTT();
    }

    client.loop();

    elapsedMillis = millis() - startMillis;
    if (elapsedMillis >= timer_duration) {
      ReadRelayState();
      ReadLedState();
      startMillis = millis();
    }
  }
}